#!/bin/bash
#Created by Sam Gleske
#Tue Jan 30 23:53:18 PST 2018
#Docker runner for Jenkins

set -ex

function sync_not_disabled() (
  [ ! -f "${JENKINS_HOME}"/disable-sync ]
)

if [ "${JENKINS_ENABLE_SYSV_CONFIG:-@@JENKINS_ENABLE_SYSV_CONFIG@@}" = yes ]; then
  [ ! -f /etc/sysconfig/jenkins ] || source /etc/sysconfig/jenkins
  [ ! -f /etc/default/jenkins ] || source /etc/default/jenkins
fi

if [ -z "${JAVA_HOME}" ]; then
  echo "Error: JAVA_HOME not set."
  exit 1
fi
export PATH="${JAVA_HOME}/bin:${PATH}"

JENKINS_WAR="~~WAR~~"

# container configurable variables
JENKINS_HOME="${JENKINS_HOME:-~~HOME~~}"
[ -n "${JENKINS_JAVA_OPTIONS}" ] || JENKINS_JAVA_OPTIONS="~~JENKINS_JAVA_OPTIONS~~"
JENKINS_PORT="${JENKINS_PORT:-@@HTTP_PORT@@}"
JENKINS_KEYSTORE="${JENKINS_KEYSTORE:-~~HTTPS_KEYSTORE~~}"
JENKINS_DEBUG_LEVEL="${JENKINS_DEBUG_LEVEL:-5}"
JENKINS_GIT_USER="${JENKINS_GIT_USER:-Jenkins Automation}"
JENKINS_GIT_EMAIL="${JENKINS_GIT_EMAIL:-noreply@example.com}"
JENKINS_JAVA_CMD="${JENKINS_JAVA_CMD:-java}"
[ -n "${JENKINS_ARGS}" ] || JENKINS_ARGS="-~~ADDITIONAL_JENKINS_ARGS~~"

if [ "${JENKINS_KEYSTORE}" ]; then
  #smart HTTPS defaults for Jenkins
  JENKINS_HTTPS_PORT="${JENKINS_HTTPS_PORT:-8443}"
  JENKINS_HTTPS_KEYSTORE_PASSWORD_FILE="${JENKINS_HTTPS_KEYSTORE_PASSWORD_FILE:-/dev/null}"
  JENKINS_HTTPS_KEYSTORE_PASSWORD="${JENKINS_HTTPS_KEYSTORE_PASSWORD:-$(< "${JENKINS_HTTPS_KEYSTORE_PASSWORD_FILE}")}"
  JENKINS_HTTPS_KEYSTORE_PASSWORD="${JENKINS_HTTPS_KEYSTORE_PASSWORD:-changeit}"
  JENKINS_HTTPS_LISTEN_ADDRESS="0.0.0.0"
fi

eval "JAVA_OPTS=( ${JAVA_OPTS} )"
eval "JENKINS_JAVA_OPTIONS=( ${JENKINS_JAVA_OPTIONS} )"
JAVA_CMD=( "${JENKINS_JAVA_CMD}" "${JAVA_OPTS[@]}" "${JENKINS_JAVA_OPTIONS[@]}" -DJENKINS_HOME="${JENKINS_HOME}" -jar "${JENKINS_WAR}" )
ARGS=( "--webroot=/var/cache/@@ARTIFACTNAME@@/war" "--pluginroot=/var/cache/@@ARTIFACTNAME@@/plugins" )
# pass shell arguments through as JENKINS_ARGS
if [ "$#" -gt 0 ]; then
  ARGS+=( "$@" )
fi
[ -z "${JENKINS_PORT}" ] || ARGS+=( "--httpPort=${JENKINS_PORT}" )
[ -z "${JENKINS_LISTEN_ADDRESS}" ] || ARGS+=( "--httpListenAddress=${JENKINS_LISTEN_ADDRESS}" )
[ -z "${JENKINS_HTTPS_PORT}" ] || ARGS+=( "--httpsPort=${JENKINS_HTTPS_PORT}" )
[ -z "${JENKINS_HTTPS_KEYSTORE}" ] || ARGS+=( "--httpsKeyStore=${JENKINS_HTTPS_KEYSTORE}" )
[ -z "${JENKINS_HTTPS_KEYSTORE_PASSWORD}" ] || ARGS+=( "--httpsKeyStorePassword=${JENKINS_HTTPS_KEYSTORE_PASSWORD}" )
[ -z "${JENKINS_HTTPS_LISTEN_ADDRESS}" ] || ARGS+=( "--httpsListenAddress=${JENKINS_HTTPS_LISTEN_ADDRESS}" )
[ -z "${JENKINS_DEBUG_LEVEL}" ] || ARGS+=( "--debug=${JENKINS_DEBUG_LEVEL}" )
[ -z "${JENKINS_ARGS}" ] || ARGS+=( ${JENKINS_ARGS} )

#synchronize plugins
if sync_not_disabled && [ -d "@@PREFIX@@/lib/@@ARTIFACTNAME@@/plugins/" ]; then
  echo "Overwriting Jenkins plugins."
  mkdir -p "${JENKINS_HOME}/plugins"
  rsync -a --delete-after "@@PREFIX@@/lib/@@ARTIFACTNAME@@/plugins/" "${JENKINS_HOME}/plugins/"
  for plugin in "${JENKINS_HOME}"/plugins/*.jpi;do
    #pin plugin versions
    #https://wiki.jenkins-ci.org/display/JENKINS/Pinned+Plugins
    touch "${plugin}.pinned"
  done
fi
#synchronize scripts
if sync_not_disabled && [ -d "@@PREFIX@@/lib/@@ARTIFACTNAME@@/scripts/init.groovy.d/" ]; then
  echo "Overwriting Jenkins init scripts."
  mkdir -p "${JENKINS_HOME}/init.groovy.d"
  rsync -a --delete-after "@@PREFIX@@/lib/@@ARTIFACTNAME@@/scripts/init.groovy.d/" "${JENKINS_HOME}/init.groovy.d/"
fi
#configure tracking JENKINS_HOME with git
if [ ! -e "${JENKINS_HOME}/.gitignore" ]; then
  echo "Creating '${JENKINS_HOME}/.gitignore'."
  cp "@@PREFIX@@/lib/@@ARTIFACTNAME@@/share/gitignore" "${JENKINS_HOME}/.gitignore"
  chmod 644 "${JENKINS_HOME}/.gitignore"
fi

#create git repo if it doesn't exist
if [ ! -d "${JENKINS_HOME}/.git" ]; then
  (
    cd "${JENKINS_HOME}"
    git init
    git config user.name "${JENKINS_GIT_USER}"
    git config user.email "${JENKINS_GIT_EMAIL}"
    git add .gitignore
    git commit -m 'initial commit'
  )
fi

#commit unsaved configuration before starting up/upgrading
if ! diff "@@PREFIX@@/lib/@@ARTIFACTNAME@@/@@MANIFEST@@" "${JENKINS_HOME}/@@MANIFEST@@" &> /dev/null; then
  git config --local --get user.name || git config user.name "${JENKINS_GIT_USER}"
  git config --local --get user.email || git config user.email "${JENKINS_GIT_EMAIL}"
  git add -A
  #commit only if changes exist
  git diff-index --quiet HEAD || git commit -m 'pre-start checkpoint commit saving configs'

  #save the current version of the bootstrapper to JENKINS_HOME on startup
  echo "Overwriting manifest in '${JENKINS_HOME}/plugins/@@MANIFEST@@'."
  cp -f "@@PREFIX@@/lib/@@ARTIFACTNAME@@/@@MANIFEST@@" "${JENKINS_HOME}/"
  echo '@@COMMIT@@' > "${JENKINS_HOME}/@@PACKAGENAME@@-commit"

  if sync_not_disabled; then
    #overwrite dailycommit which is meant for daily commit snapshots of jenkins config
    echo "Overwriting '${JENKINS_HOME}/dailycommit.sh'."
    cp -f "@@PREFIX@@/lib/@@ARTIFACTNAME@@/share/dailycommit.sh" "${JENKINS_HOME}/"
    chmod 755 "${JENKINS_HOME}/dailycommit.sh"

    #overwrite gitignore in case it has changed in the package
    echo "Overwriting GITIGNORE file in JENKINS_HOME"
    cp -f "@@PREFIX@@/lib/@@ARTIFACTNAME@@/share/gitignore" "${JENKINS_HOME}/.gitignore"
  fi
fi

for x in ~/.bash_profile ~/.bashrc; do
  grep JENKINS_HOME "${x}" || echo "export JENKINS_HOME=\"${JENKINS_HOME}\"" >> "${x}"
done

echo "Starting @@PRODUCTNAME@@"
#launch in foreground for docker to collect logs on stdout
exec "${JAVA_CMD[@]}" "${ARGS[@]}"
